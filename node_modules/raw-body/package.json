/**
 * Accepts a function that is called when the promise is canceled.
 *
 * You're not required to call this function. You can call this function multiple times to add multiple cancel handlers.
 */
export interface OnCancelFunction {
	(cancelHandler: () => void): void;
	shouldReject: boolean;
}

declare class PCancelable<ValueType> extends Promise<ValueType> {
	/**
	 * Convenience method to make your promise-returning or async function cancelable.
	 *
	 * @param fn - A promise-returning function. The function you specify will have `onCancel` appended to its parameters.
	 *
	 * @example
	 *
	 * import PCancelable from 'p-cancelable';
	 *
	 * const fn = PCancelable.fn((input, onCancel) => {
	 * 	const job = new Job();
	 *
	 * 	onCancel(() => {
	 * 		job.cleanup();
	 * 	});
	 *
	 * 	return job.start(); //=> Promise
	 * });
	 *
	 * const cancelablePromise = fn('input'); //=> PCancelable
	 *
	 * // â€¦
	 *
	 * cancelablePromise.cancel();
	 */
	static fn<ReturnType>(
		userFn: (onCancel: OnCancelFunction) => PromiseLike<ReturnType>
	): () => PCancelable<ReturnType>;
	static fn<Agument1Type, ReturnType>(
		userFn: (
			argument1: Agument1Type,
			onCancel: OnCancelFunction
		) => PromiseLike<ReturnType>
	): (argument1: Agument1Type) => PCancelable<ReturnType>;
	static fn<Agument1Type, Agument2Type, ReturnType